#SAMPLES = ["A", "B"]
#configfile: "config.yaml"

workdir: config["workdir"]

rule all:
    input:
        expand("tmp/qc/{sample}_fastqc.html", sample=config["samples"]),
        #expand("tmp/trimmed/{sample}_trimmed.fq", sample=config["samples"]),
        #expand("tmp/trimmed/{sample}_trimmed_fastqc.html", sample=config["samples"]),
        expand("tmp/sorted_reads/{sample}.bam.bai", sample=config["samples"])

def get_fastq(wildcards):
    return config["samples"][wildcards.sample]


rule fastqc_before_trim:
    input:
        get_fastq
    output:
        "tmp/qc/{sample}_fastqc.html",
        "tmp/qc/{sample}_fastqc.zip"
    shell:
        "fastqc {input} --outdir tmp/qc/"

rule trim_galore_se:
    input:
        get_fastq
    output:
        temp("tmp/trimmed/{sample}_trimmed.fq"),                     ## suffix .fq.gz
        "tmp/trimmed/{sample}.fastq.gz_trimming_report.txt",
    params:
        path= config["workdir"] + "/tmp/trimmed/"                 ## path needs to be full path: failed to recognize space
    log:
        "tmp/trimmed/{sample}.log",
    shell:
        "trim_galore -q 20 --stringency 3 --length 20 --dont_gzip -o {params.path} {input}"             ## --dont_gzip is a walkaround of OneDirve - UNN

rule fastqc_after_trim:
    input:
        "tmp/trimmed/{sample}_trimmed.fq"
    output:
        "tmp/trimmed/{sample}_trimmed_fastqc.html",
        "tmp/trimmed/{sample}_trimmed_fastqc.zip"
    shell:
        "fastqc {input}"

rule bwa_map:
    input:
        config["bwa_index"],
        "tmp/trimmed/{sample}_trimmed.fq"
    output:
        temp("tmp/mapped_reads/{sample}.bam")
    threads: 2
    log:
        "tmp/logs/{sample}_bwa_map.log"
    params:
        rg=r"@RG\tID:{sample}\tSM:{sample}"
    shell:
        "(bwa mem -R '{params.rg}' -t {threads}  {input} | "
        "samtools view -Sb - > {output}) 2> {log}"


rule samtools_sort:
    input:
        "tmp/mapped_reads/{sample}.bam"
    output:
        "tmp/sorted_reads/{sample}.bam"
    shell:
        "samtools sort -T tmp/sorted_reads/{wildcards.sample} "
        "-O bam {input} > {output}"


rule samtools_index:
    input:
        "tmp/sorted_reads/{sample}.bam"
    output:
        "tmp/sorted_reads/{sample}.bam.bai"
    shell:
        "samtools index {input}"
